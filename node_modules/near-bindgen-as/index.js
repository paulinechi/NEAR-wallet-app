!function(e,i){"object"==typeof exports&&"object"==typeof module?module.exports=i(require("assemblyscript")):"function"==typeof define&&define.amd?define(["assemblyscript"],i):"object"==typeof exports?exports.transformer=i(require("assemblyscript")):e.transformer=i(e.assemblyscript)}("undefined"!=typeof self?self:this,(function(e){return function(e){var i={};function t(s){if(i[s])return i[s].exports;var n=i[s]={i:s,l:!1,exports:{}};return e[s].call(n.exports,n,n.exports,t),n.l=!0,n.exports}return t.m=e,t.c=i,t.d=function(e,i,s){t.o(e,i)||Object.defineProperty(e,i,{enumerable:!0,get:s})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,i){if(1&i&&(e=t(e)),8&i)return e;if(4&i&&"object"==typeof e&&e&&e.__esModule)return e;var s=Object.create(null);if(t.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:e}),2&i&&"string"!=typeof e)for(var n in e)t.d(s,n,function(i){return e[i]}.bind(null,n));return s},t.n=function(e){var i=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(i,"a",i),i},t.o=function(e,i){return Object.prototype.hasOwnProperty.call(e,i)},t.p="",t(t.s=3)}([function(e,i,t){"use strict";function s(e){for(var t in e)i.hasOwnProperty(t)||(i[t]=e[t])}Object.defineProperty(i,"__esModule",{value:!0}),s(t(1)),s(t(5))},function(i,t){i.exports=e},function(e,i,t){"use strict";Object.defineProperty(i,"__esModule",{value:!0});const s=t(1),n=t(8);class r extends n.AbstractVisitor{constructor(){super(...arguments),this.depth=0}_visit(e){switch(e.kind){case s.NodeKind.SOURCE:this.visitSource(e);break;case s.NodeKind.NAMEDTYPE:this.visitNamedTypeNode(e);break;case s.NodeKind.FUNCTIONTYPE:this.visitFunctionTypeNode(e);break;case s.NodeKind.TYPENAME:this.visitTypeName(e);case s.NodeKind.TYPEPARAMETER:this.visitTypeParameter(e);break;case s.NodeKind.FALSE:case s.NodeKind.NULL:case s.NodeKind.SUPER:case s.NodeKind.THIS:case s.NodeKind.TRUE:case s.NodeKind.CONSTRUCTOR:case s.NodeKind.IDENTIFIER:this.visitIdentifierExpression(e);break;case s.NodeKind.ASSERTION:this.visitAssertionExpression(e);break;case s.NodeKind.BINARY:this.visitBinaryExpression(e);break;case s.NodeKind.CALL:this.visitCallExpression(e);break;case s.NodeKind.CLASS:this.visitClassExpression(e);break;case s.NodeKind.COMMA:this.visitCommaExpression(e);break;case s.NodeKind.ELEMENTACCESS:this.visitElementAccessExpression(e);break;case s.NodeKind.FUNCTION:this.visitFunctionExpression(e);break;case s.NodeKind.INSTANCEOF:this.visitInstanceOfExpression(e);break;case s.NodeKind.LITERAL:this.visitLiteralExpression(e);break;case s.NodeKind.NEW:this.visitNewExpression(e);break;case s.NodeKind.PARENTHESIZED:this.visitParenthesizedExpression(e);break;case s.NodeKind.PROPERTYACCESS:this.visitPropertyAccessExpression(e);break;case s.NodeKind.TERNARY:this.visitTernaryExpression(e);break;case s.NodeKind.UNARYPOSTFIX:this.visitUnaryPostfixExpression(e);break;case s.NodeKind.UNARYPREFIX:this.visitUnaryPrefixExpression(e);break;case s.NodeKind.BLOCK:this.visitBlockStatement(e);break;case s.NodeKind.BREAK:this.visitBreakStatement(e);break;case s.NodeKind.CONTINUE:this.visitContinueStatement(e);break;case s.NodeKind.DO:this.visitDoStatement(e);break;case s.NodeKind.EMPTY:this.visitEmptyStatement(e);break;case s.NodeKind.EXPORT:this.visitExportStatement(e);break;case s.NodeKind.EXPORTDEFAULT:this.visitExportDefaultStatement(e);break;case s.NodeKind.EXPORTIMPORT:this.visitExportImportStatement(e);break;case s.NodeKind.EXPRESSION:this.visitExpressionStatement(e);break;case s.NodeKind.FOR:this.visitForStatement(e);break;case s.NodeKind.IF:this.visitIfStatement(e);break;case s.NodeKind.IMPORT:this.visitImportStatement(e);break;case s.NodeKind.RETURN:this.visitReturnStatement(e);break;case s.NodeKind.SWITCH:this.visitSwitchStatement(e);break;case s.NodeKind.THROW:this.visitThrowStatement(e);break;case s.NodeKind.TRY:this.visitTryStatement(e);break;case s.NodeKind.VARIABLE:this.visitVariableStatement(e);break;case s.NodeKind.WHILE:this.visitWhileStatement(e);break;case s.NodeKind.CLASSDECLARATION:this.visitClassDeclaration(e);break;case s.NodeKind.ENUMDECLARATION:this.visitEnumDeclaration(e);break;case s.NodeKind.ENUMVALUEDECLARATION:this.visitEnumValueDeclaration(e);break;case s.NodeKind.FIELDDECLARATION:this.visitFieldDeclaration(e);break;case s.NodeKind.FUNCTIONDECLARATION:this.visitFunctionDeclaration(e);break;case s.NodeKind.IMPORTDECLARATION:this.visitImportDeclaration(e);break;case s.NodeKind.INDEXSIGNATUREDECLARATION:this.visitIndexSignatureDeclaration(e);break;case s.NodeKind.INTERFACEDECLARATION:this.visitInterfaceDeclaration(e);break;case s.NodeKind.METHODDECLARATION:this.visitMethodDeclaration(e);break;case s.NodeKind.NAMESPACEDECLARATION:this.visitNamespaceDeclaration(e);break;case s.NodeKind.TYPEDECLARATION:this.visitTypeDeclaration(e);break;case s.NodeKind.VARIABLEDECLARATION:this.visitVariableDeclaration(e);break;case s.NodeKind.DECORATOR:this.visitDecoratorNode(e);break;case s.NodeKind.EXPORTMEMBER:this.visitExportMember(e);break;case s.NodeKind.PARAMETER:this.visitParameter(e);break;case s.NodeKind.SWITCHCASE:this.visitSwitchCase(e);break;default:assert(!1)}}visitSource(e){for(const i of e.statements)this.depth++,this.visit(i),this.depth--}visitTypeNode(e){}visitTypeName(e){this.visit(e.identifier),e.next&&this.visit(e.next)}visitNamedTypeNode(e){this.visit(e.name),this.visit(e.typeArguments)}visitFunctionTypeNode(e){for(let i of e.parameters)this.visit(i);this.visit(e.returnType)}visitTypeParameter(e){this.visit(e.name),e.extendsType&&this.visit(e.extendsType),e.defaultType&&this.visit(e.defaultType)}visitIdentifierExpression(e){}visitArrayLiteralExpression(e){e.elementExpressions.map(e=>{e&&this.visit(e)})}visitObjectLiteralExpression(e){if(e.values&&e.names){assert(e.values.length==e.names.length);for(let i=0;i<e.values.length;i++)this.visit(e.names[i]),this.visit(e.values[i])}}visitAssertionExpression(e){e.toType&&this.visit(e.toType),this.visit(e.expression)}visitBinaryExpression(e){this.visit(e.left),this.visit(e.right)}visitCallExpression(e){this.visit(e.expression),this.visit(e.typeArguments),this.visit(e.arguments)}visitClassExpression(e){this.visit(e.declaration)}visitCommaExpression(e){this.visit(e.expressions)}visitElementAccessExpression(e){this.visit(e.elementExpression),this.visit(e.expression)}visitFunctionExpression(e){this.visit(e.declaration)}visitLiteralExpression(e){}visitFloatLiteralExpression(e){}visitInstanceOfExpression(e){this.visit(e.expression),this.visit(e.isType)}visitIntegerLiteralExpression(e){}visitStringLiteral(e,i){}visitStringLiteralExpression(e){}visitRegexpLiteralExpression(e){}visitNewExpression(e){this.visit(e.expression),this.visit(e.typeArguments),this.visit(e.arguments)}visitParenthesizedExpression(e){this.visit(e.expression)}visitPropertyAccessExpression(e){this.visit(e.property),this.visit(e.expression)}visitTernaryExpression(e){this.visit(e.condition),this.visit(e.ifThen),this.visit(e.ifElse)}visitUnaryExpression(e){this.visit(e.operand)}visitUnaryPostfixExpression(e){this.visit(e.operand)}visitUnaryPrefixExpression(e){this.visit(e.operand)}visitSuperExpression(e){}visitFalseExpression(e){}visitTrueExpression(e){}visitThisExpression(e){}visitNullExperssion(e){}visitConstructorExpression(e){}visitNodeAndTerminate(e){}visitBlockStatement(e){this.depth++,this.visit(e.statements),this.depth--}visitBreakStatement(e){e.label&&this.visit(e.label)}visitContinueStatement(e){e.label&&this.visit(e.label)}visitClassDeclaration(e,i){this.visit(e.name),this.depth++,this.visit(e.decorators),assert(e.isGeneric?null!=e.typeParameters:null==e.typeParameters),e.isGeneric&&this.visit(e.typeParameters),e.extendsType&&this.visit(e.extendsType),this.visit(e.implementsTypes),this.visit(e.members),this.depth--}visitDoStatement(e){this.visit(e.condition),this.visit(e.statement)}visitEmptyStatement(e){}visitEnumDeclaration(e,i){this.visit(e.name),this.visit(e.decorators),this.visit(e.values)}visitEnumValueDeclaration(e){this.visit(e.name),e.initializer&&this.visit(e.initializer)}visitExportImportStatement(e){this.visit(e.name),this.visit(e.externalName)}visitExportMember(e){this.visit(e.localName),this.visit(e.exportedName)}visitExportStatement(e){e.path&&this.visit(e.path),this.visit(e.members)}visitExportDefaultStatement(e){this.visit(e.declaration)}visitExpressionStatement(e){this.visit(e.expression)}visitFieldDeclaration(e){this.visit(e.name),e.type&&this.visit(e.type),e.initializer&&this.visit(e.initializer),this.visit(e.decorators)}visitForStatement(e){e.initializer&&this.visit(e.initializer),e.condition&&this.visit(e.condition),e.incrementor&&this.visit(e.incrementor),this.visit(e.statement)}visitFunctionDeclaration(e,i){this.visit(e.name),this.visit(e.decorators),e.isGeneric&&this.visit(e.typeParameters),this.visit(e.signature),this.depth++,e.body&&this.visit(e.body),this.depth--}visitFunctionCommon(e){}visitIfStatement(e){this.visit(e.condition),this.visit(e.ifTrue),e.ifFalse&&this.visit(e.ifFalse)}visitImportDeclaration(e){this.visit(e.foreignName),this.visit(e.name),this.visit(e.decorators)}visitImportStatement(e){e.namespaceName&&this.visit(e.namespaceName),this.visit(e.declarations)}visitIndexSignatureDeclaration(e){}visitInterfaceDeclaration(e,i){this.visit(e.name),e.isGeneric&&this.visit(e.typeParameters),this.visit(e.implementsTypes),e.extendsType&&this.visit(e.extendsType),this.depth++,this.visit(e.members),this.depth--}visitMethodDeclaration(e){this.visit(e.name),e.isGeneric&&this.visit(e.typeParameters),this.visit(e.signature),this.visit(e.decorators),this.depth++,e.body&&this.visit(e.body),this.depth--}visitNamespaceDeclaration(e,i){this.visit(e.name),this.visit(e.decorators),this.visit(e.members)}visitReturnStatement(e){e.value&&this.visit(e.value)}visitSwitchCase(e){e.label&&this.visit(e.label),this.visit(e.statements)}visitSwitchStatement(e){this.visit(e.condition),this.depth++,this.visit(e.cases),this.depth--}visitThrowStatement(e){this.visit(e.value)}visitTryStatement(e){this.visit(e.statements),e.catchVariable&&this.visit(e.catchVariable),this.visit(e.catchStatements),this.visit(e.finallyStatements)}visitTypeDeclaration(e){this.visit(e.name),this.visit(e.decorators),this.visit(e.type),this.visit(e.typeParameters)}visitVariableDeclaration(e){this.visit(e.name),e.type&&this.visit(e.type),e.initializer&&this.visit(e.initializer)}visitVariableStatement(e){this.visit(e.decorators),this.visit(e.declarations)}visitWhileStatement(e){this.visit(e.condition),this.depth++,this.visit(e.statement),this.depth--}visitVoidStatement(e){}visitComment(e){}visitDecoratorNode(e){this.visit(e.name),this.visit(e.arguments)}visitParameter(e){this.visit(e.name),e.implicitFieldDeclaration&&this.visit(e.implicitFieldDeclaration),e.initializer&&this.visit(e.initializer),this.visit(e.type)}}i.BaseVisitor=r},function(e,i,t){"use strict";const s=t(4);e.exports=s.JSONTransformer},function(e,i,t){"use strict";Object.defineProperty(i,"__esModule",{value:!0});const s=t(0),n=t(6),r=t(9);class a extends s.Transform{get program(){return this.parser.program}afterParse(e){this.parser=e;const i=this.writeFile,t=this.baseDir;let s=n.JSONBindingsBuilder.nearFiles(e);a.isTest=s.map(e=>e.normalizedPath).some(e=>e.includes("spec")),s.forEach(s=>{let r=s.text.substr(0,s.text.indexOf("\n")).includes("out");e.donelog.delete(s.internalPath),e.seenlog.delete(s.internalPath),e.program.sources=e.program.sources.filter(e=>e!==s);let a=n.JSONBindingsBuilder.build(e,s);r&&i("out/"+s.normalizedPath,a,t),e.parseFile(a,(n.isEntry(s)?"":"./")+s.normalizedPath,n.isEntry(s))});{const e='\nimport { base64 } from "near-runtime-ts";\nimport { JSONEncoder as _JSONEncoder, JSONDecoder, ThrowingJSONHandler } from "assemblyscript-json";\nimport { u128 } from "bignum";\n// Runtime functions\n// tslint:disable: no-unsafe-any\n\n@global\nclass JSONEncoder extends _JSONEncoder {}\n\ntype Usize = u64;\n//@ts-ignore\n@global\n@external("env", "read_register")\ndeclare function read_register(register_id: Usize, ptr: Usize): void;\n//@ts-ignore\n@global\n@external("env", "register_len")\ndeclare function register_len(register_id: Usize): Usize;\n\n//@ts-ignore\n@global\n@external("env", "input")\ndeclare function input(register_id: Usize): void;\n//@ts-ignore\n@global\n@external("env", "value_return")\ndeclare function value_return(value_len: Usize, value_ptr: Usize): void;\n//@ts-ignore\n@global\n@external("env", "panic")\ndeclare function panic(): void;\n//@ts-ignore\n@global\nfunction getInput(): Obj { \n  // Reading input bytes.\n  input(0);\n  let json_len = register_len(0);\n  if (json_len == U32.MAX_VALUE) {\n    panic();\n  }\n  let json = new Uint8Array(json_len as u32);\n  //@ts-ignore\n  read_register(0, <usize>json.buffer);\n  return <Obj> JSON.parse(json);\n}\n\nabstract class Value {\n  static String(str: string): Value {\n    return new Str(str);\n  }\n  static Number(num: i64): Value {\n    return new Num(num);\n  }\n  static Bool(b: bool): Value {\n    return new Bools(b);\n  }\n  static Null(): Value {\n    return new Null();\n  }\n  static Array(): Value {\n    return new Arr();\n  }\n  static Object(): Value {\n    return new Obj();\n  }\n\n  toString(): string {\n    if (this instanceof Str) {\n      return (<Str>this).toString();\n    }\n    if (this instanceof Num) {\n      return (<Num>this).toString();\n    }\n    if (this instanceof Bools) {\n      return (<Bools>this).toString();\n    }\n    if (this instanceof Null) {\n      return (<Null>this).toString();\n    }\n    if (this instanceof Arr) {\n      return (<Arr>this).toString();\n    }\n    if (this instanceof Obj) {\n      return (<Obj>this).toString();\n    }\n    return "Value";\n  }\n}\n//@ts-ignore\n@global\nclass Str extends Value {\n  constructor(public _str: string) {\n    super();\n  }\n\n  toString(): string {\n    return "\\"" + this._str + "\\"";\n  }\n}\n//@ts-ignore\n@global\nclass Num extends Value {\n  constructor(public _num: i64) {\n    super();\n  }\n\n  toString(): string {\n    return this._num.toString();\n  }\n}\n//@ts-ignore\n@global\nclass Null extends Value {\n  constructor() {\n    super();\n  }\n\n  toString(): string {\n    return "null";\n  }\n}\n\n//@ts-ignore\n@global class Bools extends Value {\n  constructor(public _bool: bool) {\n    super();\n  }\n\n  toString(): string {\n    return this._bool.toString();\n  }\n}\n\n//@ts-ignore\n@global\nclass Arr extends Value {\n  _arr: Array<Value>;\n  constructor() {\n    super();\n    this._arr = new Array<Value>();\n  }\n\n  push(obj: Value): void {\n    this._arr.push(obj);\n  }\n\n  toString(): string {\n    return "[" + this._arr.map<string>((val: Value,i: i32,_arr: Value[]): string  => val.toString()).join(",") + "]";\n  }\n}\n\n//@ts-ignore\n@global\nclass Obj extends Value {\n  _obj: Map<string, Value>;\n  keys: Array<string>;\n\n  constructor() {\n    super();\n    this._obj = new Map();\n    this.keys = new Array();\n  }\n\n  set(key: string, value: Value): void {\n    if (!this._obj.has(key)) {\n      this.keys.push(key);\n    }\n    this._obj.set(key, value);\n  }\n\n  get(key: string): Value | null {\n    if (!this._obj.has(key)) {\n      return null;\n    }\n    return this._obj.get(key);\n  }\n\n  toString(): string {\n    const objs: string[] = [];\n    for (let i: i32 = 0; i < this.keys.length; i++) {\n      objs.push("\\"" + this.keys[i] + "\\":" + this._obj.get(this.keys[i]).toString());\n    }\n    return "{" + objs.join(",") + "}";\n  }\n\n  has(key: string): bool {\n    return this._obj.has(key);\n  }\n}\n\nclass Handler extends ThrowingJSONHandler {\n  stack: Value[];\n  constructor() {\n    super();\n    this.stack = new Array<Value>();\n  }\n\n  reset(): void {\n    while (this.stack.length > 0) {\n      this.stack.pop();\n    }\n  }\n\n  get peek(): Value {\n    return this.stack[this.stack.length - 1];\n  }\n\n  setString(name: string, value: string): void {\n    const obj: Value = Value.String(value);\n    this.addValue(name, obj);\n  }\n\n  setBoolean(name: string, value: bool): void {\n    const obj = Value.Bool(value);\n    this.addValue(name, obj);\n  }\n\n  setNull(name: string): void {\n    const obj = Value.Null();\n    this.addValue(name, obj);\n  }\n\n  setInteger(name: string, value: i64): void {\n    const obj = Value.Number(value);\n    this.addValue(name, obj);\n  }\n\n  pushArray(name: string): bool {\n    const obj: Value = Value.Array();\n    if (this.stack.length == 0) {\n      this.stack.push(obj);\n    } else {\n      this.addValue(name, obj)\n      this.stack.push(obj);\n    }\n    return true;\n  }\n\n  popArray(): void {\n    if (this.stack.length > 1) {\n      this.stack.pop();\n    }\n  }\n\n  pushObject(name: string): bool {\n    const obj: Value = Value.Object();\n    this.addValue(name, obj);\n    this.stack.push(obj);\n    return true;\n  }\n\n  popObject(): void {\n    if (this.stack.length > 1) {\n      this.stack.pop();\n    }\n  }\n\n  addValue(name: string, obj: Value): void {\n    if (name.length == 0 && this.stack.length == 0) {\n      this.stack.push(obj);\n      return;\n    }\n    if (this.peek instanceof Obj) {\n      (this.peek as Obj).set(name, obj);\n    }\n    else if (this.peek instanceof Arr) {\n      (<Arr>this.peek).push(obj);\n    }\n  }\n}\n\n//@ts-ignore\n@global()\nclass JSON {\n  private static handler: Handler = new Handler();\n  private static decoder: JSONDecoder<Handler> = new JSONDecoder<Handler>(JSON.handler);\n  static parse(str: Uint8Array ): Value {\n    JSON.decoder.deserialize(str);\n    const res = JSON.decoder.handler.peek;\n    JSON.decoder.handler.reset();\n    return res;\n  }\n}\n\n//@ts-ignore\n@global\nfunction encode<T, Output = Uint8Array>(value: T, name: string | null = "", encoder: JSONEncoder = new JSONEncoder()): Output {\n  if (isBoolean<T>()) {\n    //@ts-ignore\n    encoder.setBoolean(name, value);\n  } else if (isInteger<T>()) {\n    if (value instanceof i64 || value instanceof u64) {\n      //@ts-ignore\n      encoder.setString(name, value.toString());\n    } else {\n    //@ts-ignore\n      encoder.setInteger(name, value);\n    }\n    //@ts-ignore\n  } else if (value == <T>null) {\n    encoder.setNull(name);\n  } else if (isString<T>()) {\n    //@ts-ignore\n    encoder.setString(name, value);\n  } else if (isReference<T>()) {\n    if (isArrayLike<T>(value)) {\n      if (value instanceof Uint8Array) {\n        //@ts-ignore\n        encoder.setString(name, base64.encode(<Uint8Array> value));\n      } else {\n        encoder.pushArray(name);\n        for (let i: i32 = 0; i < value.length; i++) {\n          //@ts-ignore\n          encode<valueof<T>, JSONEncoder>(value[i], null, encoder);\n        }\n        encoder.popArray();\n      }\n    } else { // Is an object\n      if (value instanceof u128) {\n        encoder.setString(name, value.toString());\n      } else {\n        //@ts-ignore\n        value._encode(name, encoder);\n      }\n    }\n  } else {\n    throw new Error("Encoding failed");\n  }\n  var output: Output;\n  //@ts-ignore\n  if (output instanceof Uint8Array) {\n    //@ts-ignore\n    return <Output>encoder.serialize();\n  }\n  //@ts-ignore\n  assert( output instanceof JSONEncoder, "Bad return type for encoder");\n  //@ts-ignore\n  return <Output>encoder;\n}\n\n//@ts-ignore\n@inline\nfunction getStr(val: Value, name: String): string {\n  assert(val instanceof Str, "Value with Key: " + name + " is not a string or null");\n  return (<Str>val)._str;\n}\n\nfunction decodeArray<T>(val: Value, name: string): Array<T> {\n  assert(val instanceof Arr, "Value with Key: " + name + " is not an array or null.");\n  const res = new Array<T>();\n  const arr = (<Arr>val)._arr;\n  for (let i: i32 = 0; i < arr.length; i++) {\n    let item: T = decode<T, Value>(arr[i]);\n    res.push(item);\n  }\n  return res;\n}\n\nfunction isReallyNullable<T>(): bool {\n  return isReference<T>() || isArrayLike<T>() || isNullable<T>() || isString<T>();\n}\n\n//@ts-ignore\n@global\nfunction decode<T, V = Uint8Array>(buf: V, name: string = ""): T {\n  const buffer = <Value>(buf instanceof Uint8Array ? JSON.parse(buf) : buf);\n  var val: Value;\n  if (buffer instanceof Obj && name != "") {\n    const obj: Obj = <Obj>buffer;\n    let res = obj.get(name);\n    if (res == null) {\n      //@ts-ignore\n      return <T>null;\n    }\n    val = res;\n  }else {\n    val = <Value> buffer;\n  }\n  if (val instanceof Null) {\n    assert(isReallyNullable<T>(), "Key: " + name + " with type " + nameof<T>() + "is not nullable.");\n    //@ts-ignore\n    return <T>null;\n  }\n  if (isString<T>()) {\n    //@ts-ignore\n    return getStr(val, name);\n  }\n  if (isBoolean<T>()) {\n    assert(val instanceof Bools, "Value with Key: " +  name + " with type " + nameof<T>()  + " is not a string");\n    //@ts-ignore\n    return (<Bools>val)._bool;\n  }\n  var value: T;\n  if (isInteger<T>()) {\n    //@ts-ignore\n    if (value instanceof u64 || value instanceof i64) {\n      assert(val instanceof Str, "Value with Key: " +  name + " with type " + nameof<T>()  + " is an 64-bit integer and is expected to be encoded as a string");\n      let str = (<Str>val)._str;\n      //@ts-ignore\n      return <T>(val instanceof u64) ? U64.parseInt(str) : I64.parseInt(str);\n    }\n    assert(val instanceof Num, "Value with Key: " +  name + " with type " + nameof<T>()  + " is not an Integer");\n    //@ts-ignore\n    return <T>(<Num>val)._num;\n  }\n  assert(isReference<T>(), name + " with type " + nameof<T>() + " must be an integer, boolean, string, object, or array");\n  if (isArrayLike<T>()) {\n    //@ts-ignore\n    if (value instanceof Uint8Array ) {\n      //@ts-ignore\n      return base64.decode(getStr(val, name));\n    }\n    //@ts-ignore\n    // assert(val instanceof Arr, "Value with Key: " +  name + " with type " + nameof<T>()  + " is expected to be an array")\n    //@ts-ignore only checking the instance\n    return <T>decodeArray<valueof<T>>(val, name);\n  }\n  //@ts-ignore\n  if (value instanceof u128) {\n    assert(val instanceof Str);\n    //@ts-ignore\n    return u128.fromString(getStr(val, name));\n  }\n  assert(val instanceof Obj, "Value with Key: " +  name + " with type " + nameof<T>()  + " is not an object or null");\n  value = instantiate<T>();\n  //@ts-ignore\n  return value.decode<Obj>(<Obj>val);\n}\n';this.parser.parseFile(e,"nearFile",!0)}a.isTest||r.TypeChecker.check(e)}afterCompile(e){a.isTest||r.TypeChecker.checkBinary(e)}}i.JSONTransformer=a,a.isTest=!1},function(e,i){i.Transform=function(){}},function(e,i,t){"use strict";Object.defineProperty(i,"__esModule",{value:!0});const s=t(0),n=t(7),r=t(2);function a(e){return e.text.includes("@nearfile")||h(e)}function o(e){return n.ASTBuilder.build(e)}function h(e){return(e.kind==s.NodeKind.SOURCE?e:e.range.source).sourceKind==s.SourceKind.USER_ENTRY}function l(e){return e.kind==s.NodeKind.CLASSDECLARATION}function d(e){return e.kind==s.NodeKind.FIELDDECLARATION}i.isEntry=h;class u extends r.BaseVisitor{constructor(){super(...arguments),this.sb=[],this.exportedClasses=new Map,this.wrappedFuncs=new Set}static build(e,i){return(new u).build(i)}static nearFiles(e){return e.program.sources.filter(a)}visitClassDeclaration(e){this.exportedClasses.has(o(e.name))||this.exportedClasses.set(o(e.name),e),super.visitClassDeclaration(e)}visitFunctionDeclaration(e){!h(e)||this.wrappedFuncs.has(o(e.name))||!e.is(s.CommonFlags.EXPORT)||0==function(e){return e.signature.parameters.length}(e)&&function(e){return"void"===o(e.signature.returnType)}(e)?super.visitFunctionDeclaration(e):(this.generateWrapperFunction(e),e.flags=e.flags^s.CommonFlags.EXPORT,this.wrappedFuncs.add(o(e.name)),super.visit(e))}generateWrapperFunction(e){let i=e.signature,t=i.parameters,s=i.returnType,n=o(s).split("|").map(e=>e.trim()).filter(e=>"null"!==e).join("|"),r=o(s).includes("null"),a=e.name.symbol;this.sb.push(`function __wrapper_${a}(): void {`),t.length>0&&this.sb.push("  const obj = getInput();"),"void"!==o(s)?this.sb.push(`  let result: ${o(s)} = ${a}(`):this.sb.push(`  ${a}(`),t.length>0&&(this.sb[this.sb.length-1]+=t.map(e=>p(e)).join(", ")),this.sb[this.sb.length-1]+=");","void"!==o(s)&&this.sb.push(`  const val = encode<${n}>(${r?`changetype<${n}>(result)`:"result"});\n  value_return(val.byteLength, <usize>val.buffer);`),this.sb.push(`}\nexport { __wrapper_${a} as ${a} }`)}typeName(e){if(!l(e))return n.ASTBuilder.build(e);let i=o((e=e).name);return e.isGeneric&&(i+="<"+e.typeParameters.map(o).join(", ")+">"),i}build(e){return this.sb=[],this.visit(e),e.statements.map(e=>{let i=n.ASTBuilder.build(e);if(l(e)){let t=e;if(i=i.slice(0,i.lastIndexOf("}")),t.members.filter(d).map(e=>e).some(e=>null==e.type))throw new Error("All Fields must have explict type declaration.");let s=this.typeName(t);i+=`\n  decode<V = Uint8Array>(buf: V): ${s} {\n    let json: Obj;\n    if (buf instanceof Uint8Array) {\n      json = JSON.parse(buf);\n    } else {\n      assert(buf instanceof Obj, "argument must be Uint8Array or Json Object");\n      json = <Obj> buf;\n    }\n    return this._decode(json);\n  }\n\n  static decode<V = Uint8Array>(buf: V): ${s} {\n    return decode<${s}>(buf!);\n  }\n\n  private _decode(obj: Obj): ${s} {\n    ${function(e){return e.members.filter(d).map(e=>{const i=o(e.name);return p(e,`this.${i} = obj.has("${i}") ? `)+`: this.${i};`})}(t).join("\n    ")}\n    return this;\n  }\n\n  _encode(name: string | null = "", _encoder: JSONEncoder | null = null): JSONEncoder {\n    let encoder = (_encoder == null ? new JSONEncoder() : _encoder)!;\n    encoder.pushObject(name);\n    ${function(e){return e.members.filter(d).map(e=>{let i=o(e.type),t=o(e.name);return`encode<${i}, JSONEncoder>(this.${t}, "${t}", encoder);`})}(t).join("\n    ")}\n    encoder.popObject();\n    return encoder;\n  }\n  encode(): Uint8Array {\n    return this._encode().serialize();\n  }\n\n  serialize(): Uint8Array {\n    return this.encode();\n  }\n\n  toJSON(): string {\n    return this._encode().toString();\n  }\n}`}return i}).concat(this.sb).join("\n")}}function p(e,i=""){return`${i}decode<${o(e.type)}, Obj>(obj, "${o(e.name)}")`}i.JSONBindingsBuilder=u},function(e,i,t){"use strict";Object.defineProperty(i,"__esModule",{value:!0});const s=t(0);class n{constructor(){this.sb=[],this.indentLevel=0}static build(e){var i=new n;return i.visitNode(e),i.finish()}visitNode(e){switch(e.kind){case s.NodeKind.SOURCE:this.visitSource(e);break;case s.NodeKind.NAMEDTYPE:this.visitNamedTypeNode(e);break;case s.NodeKind.FUNCTIONTYPE:this.visitFunctionTypeNode(e);break;case s.NodeKind.TYPEPARAMETER:this.visitTypeParameter(e);break;case s.NodeKind.FALSE:case s.NodeKind.NULL:case s.NodeKind.SUPER:case s.NodeKind.THIS:case s.NodeKind.TRUE:case s.NodeKind.CONSTRUCTOR:case s.NodeKind.IDENTIFIER:this.visitIdentifierExpression(e);break;case s.NodeKind.ASSERTION:this.visitAssertionExpression(e);break;case s.NodeKind.BINARY:this.visitBinaryExpression(e);break;case s.NodeKind.CALL:this.visitCallExpression(e);break;case s.NodeKind.CLASS:this.visitClassExpression(e);break;case s.NodeKind.COMMA:this.visitCommaExpression(e);break;case s.NodeKind.ELEMENTACCESS:this.visitElementAccessExpression(e);break;case s.NodeKind.FUNCTION:this.visitFunctionExpression(e);break;case s.NodeKind.INSTANCEOF:this.visitInstanceOfExpression(e);break;case s.NodeKind.LITERAL:this.visitLiteralExpression(e);break;case s.NodeKind.NEW:this.visitNewExpression(e);break;case s.NodeKind.PARENTHESIZED:this.visitParenthesizedExpression(e);break;case s.NodeKind.PROPERTYACCESS:this.visitPropertyAccessExpression(e);break;case s.NodeKind.TERNARY:this.visitTernaryExpression(e);break;case s.NodeKind.UNARYPOSTFIX:this.visitUnaryPostfixExpression(e);break;case s.NodeKind.UNARYPREFIX:this.visitUnaryPrefixExpression(e);break;case s.NodeKind.BLOCK:this.visitBlockStatement(e);break;case s.NodeKind.BREAK:this.visitBreakStatement(e);break;case s.NodeKind.CONTINUE:this.visitContinueStatement(e);break;case s.NodeKind.DO:this.visitDoStatement(e);break;case s.NodeKind.EMPTY:this.visitEmptyStatement(e);break;case s.NodeKind.EXPORT:this.visitExportStatement(e);break;case s.NodeKind.EXPORTDEFAULT:this.visitExportDefaultStatement(e);break;case s.NodeKind.EXPORTIMPORT:this.visitExportImportStatement(e);break;case s.NodeKind.EXPRESSION:this.visitExpressionStatement(e);break;case s.NodeKind.FOR:this.visitForStatement(e);break;case s.NodeKind.IF:this.visitIfStatement(e);break;case s.NodeKind.IMPORT:this.visitImportStatement(e);break;case s.NodeKind.RETURN:this.visitReturnStatement(e);break;case s.NodeKind.SWITCH:this.visitSwitchStatement(e);break;case s.NodeKind.THROW:this.visitThrowStatement(e);break;case s.NodeKind.TRY:this.visitTryStatement(e);break;case s.NodeKind.VARIABLE:this.visitVariableStatement(e);break;case s.NodeKind.WHILE:this.visitWhileStatement(e);break;case s.NodeKind.CLASSDECLARATION:this.visitClassDeclaration(e);break;case s.NodeKind.ENUMDECLARATION:this.visitEnumDeclaration(e);break;case s.NodeKind.ENUMVALUEDECLARATION:this.visitEnumValueDeclaration(e);break;case s.NodeKind.FIELDDECLARATION:this.visitFieldDeclaration(e);break;case s.NodeKind.FUNCTIONDECLARATION:this.visitFunctionDeclaration(e);break;case s.NodeKind.IMPORTDECLARATION:this.visitImportDeclaration(e);break;case s.NodeKind.INDEXSIGNATUREDECLARATION:this.visitIndexSignatureDeclaration(e);break;case s.NodeKind.INTERFACEDECLARATION:this.visitInterfaceDeclaration(e);break;case s.NodeKind.METHODDECLARATION:this.visitMethodDeclaration(e);break;case s.NodeKind.NAMESPACEDECLARATION:this.visitNamespaceDeclaration(e);break;case s.NodeKind.TYPEDECLARATION:this.visitTypeDeclaration(e);break;case s.NodeKind.VARIABLEDECLARATION:this.visitVariableDeclaration(e);break;case s.NodeKind.DECORATOR:this.serializeDecorator(e);break;case s.NodeKind.EXPORTMEMBER:this.visitExportMember(e);break;case s.NodeKind.PARAMETER:this.serializeParameter(e);break;case s.NodeKind.SWITCHCASE:this.visitSwitchCase(e);break;default:assert(!1)}}visitSource(e){var i=e.statements;for(let e=0,t=i.length;e<t;++e)this.visitNodeAndTerminate(i[e])}visitTypeNode(e){switch(e.kind){case s.NodeKind.NAMEDTYPE:this.visitNamedTypeNode(e);break;case s.NodeKind.FUNCTIONTYPE:this.visitFunctionTypeNode(e);break;default:assert(!1)}}visitTypeName(e){this.visitIdentifierExpression(e.identifier);for(var i=this.sb,t=e.next;t;)i.push("."),this.visitIdentifierExpression(t.identifier),t=t.next}visitNamedTypeNode(e){this.visitTypeName(e.name);var i=e.typeArguments;if(i){let t=i.length,s=this.sb;if(t){s.push("<"),this.visitTypeNode(i[0]);for(let e=1;e<t;++e)s.push(", "),this.visitTypeNode(i[e]);s.push(">")}e.isNullable&&s.push(" | null")}}visitFunctionTypeNode(e){var i=e.isNullable,t=this.sb;t.push(i?"((":"(");var s=e.explicitThisType;s&&(t.push("this: "),this.visitTypeNode(s));var n=e.parameters,r=n.length;if(r){s&&t.push(", "),this.serializeParameter(n[0]);for(let e=1;e<r;++e)t.push(", "),this.serializeParameter(n[e])}var a=e.returnType;a?(t.push(") => "),this.visitTypeNode(a)):t.push(") => void"),i&&t.push(") | null")}visitTypeParameter(e){this.visitIdentifierExpression(e.name);var i=e.extendsType;i&&(this.sb.push(" extends "),this.visitTypeNode(i));var t=e.defaultType;t&&(this.sb.push("="),this.visitTypeNode(t))}visitIdentifierExpression(e){e.isQuoted?this.visitStringLiteral(e.text):this.sb.push(e.text)}visitArrayLiteralExpression(e){var i=this.sb;i.push("[");var t=e.elementExpressions,s=t.length;if(s){t[0]&&this.visitNode(t[0]);for(let e=1;e<s;++e)i.push(", "),t[e]&&this.visitNode(t[e])}i.push("]")}visitObjectLiteralExpression(e){var i=this.sb,t=e.names,n=e.values,r=t.length;if(assert(r==n.length),r){i.push("{\n"),s.indent(i,++this.indentLevel),this.visitNode(t[0]),i.push(": "),this.visitNode(n[0]);for(let e=1;e<r;++e){i.push(",\n"),s.indent(i,this.indentLevel);let r=t[e],a=n[e];r===a?this.visitNode(r):(this.visitNode(r),i.push(": "),this.visitNode(a))}i.push("\n"),s.indent(i,--this.indentLevel),i.push("}")}else i.push("{}")}visitAssertionExpression(e){var i=this.sb;switch(e.assertionKind){case s.AssertionKind.PREFIX:i.push("<"),this.visitTypeNode(assert(e.toType)),i.push(">"),this.visitNode(e.expression);break;case s.AssertionKind.AS:this.visitNode(e.expression),i.push(" as "),this.visitTypeNode(assert(e.toType));break;case s.AssertionKind.NONNULL:this.visitNode(e.expression),i.push("!");break;default:assert(!1)}}visitBinaryExpression(e){var i=this.sb;this.visitNode(e.left),i.push(" "),i.push(s.operatorTokenToString(e.operator)),i.push(" "),this.visitNode(e.right)}visitCallExpression(e){var i=this.sb;this.visitNode(e.expression);var t=e.typeArguments;if(t){let e=t.length;if(e){i.push("<"),this.visitTypeNode(t[0]);for(let s=1;s<e;++s)i.push(", "),this.visitTypeNode(t[s]);i.push(">(")}}else i.push("(");var s=e.arguments,n=s.length;if(n){this.visitNode(s[0]);for(let e=1;e<n;++e)i.push(", "),this.visitNode(s[e])}i.push(")")}visitClassExpression(e){var i=e.declaration;this.visitClassDeclaration(i)}visitCommaExpression(e){var i=e.expressions,t=assert(i.length);this.visitNode(i[0]);var s=this.sb;for(let e=1;e<t;++e)s.push(","),this.visitNode(i[e])}visitElementAccessExpression(e){var i=this.sb;this.visitNode(e.expression),i.push("["),this.visitNode(e.elementExpression),i.push("]")}visitFunctionExpression(e){var i=e.declaration;i.arrowKind?assert(0==i.name.text.length):i.name.text.length?this.sb.push("function "):this.sb.push("function"),this.visitFunctionCommon(i)}visitLiteralExpression(e){switch(e.literalKind){case s.LiteralKind.FLOAT:this.visitFloatLiteralExpression(e);break;case s.LiteralKind.INTEGER:this.visitIntegerLiteralExpression(e);break;case s.LiteralKind.STRING:this.visitStringLiteralExpression(e);break;case s.LiteralKind.REGEXP:this.visitRegexpLiteralExpression(e);break;case s.LiteralKind.ARRAY:this.visitArrayLiteralExpression(e);break;case s.LiteralKind.OBJECT:this.visitObjectLiteralExpression(e);break;default:assert(!1)}}visitFloatLiteralExpression(e){this.sb.push(e.value.toString(10))}visitInstanceOfExpression(e){this.visitNode(e.expression),this.sb.push(" instanceof "),this.visitTypeNode(e.isType)}visitIntegerLiteralExpression(e){this.sb.push(i64_to_string(e.value))}visitStringLiteral(e,i=!1){var t=this.sb,s=0,n=i?"'":'"';t.push(n);var r=0;for(let n=e.length;r<n;)switch(e.charCodeAt(r)){case 0:r>s&&t.push(e.substring(s,s=r+1)),t.push("\\0"),s=++r;break;case 8:r>s&&t.push(e.substring(s,r)),s=++r,t.push("\\b");break;case 9:r>s&&t.push(e.substring(s,r)),s=++r,t.push("\\t");break;case 10:r>s&&t.push(e.substring(s,r)),s=++r,t.push("\\n");break;case 11:r>s&&t.push(e.substring(s,r)),s=++r,t.push("\\v");break;case 12:r>s&&t.push(e.substring(s,r)),s=++r,t.push("\\f");break;case 13:r>s&&t.push(e.substring(s,r)),t.push("\\r"),s=++r;break;case 34:i?++r:(r>s&&t.push(e.substring(s,r)),t.push('\\"'),s=++r);break;case 39:i?(r>s&&t.push(e.substring(s,r)),t.push("\\'"),s=++r):++r;break;case 92:r>s&&t.push(e.substring(s,r)),t.push("\\\\"),s=++r;break;default:++r}r>s&&t.push(e.substring(s,r)),t.push(n)}visitStringLiteralExpression(e){this.visitStringLiteral(e.value)}visitRegexpLiteralExpression(e){var i=this.sb;i.push("/"),i.push(e.pattern),i.push("/"),i.push(e.patternFlags)}visitNewExpression(e){this.sb.push("new "),this.visitCallExpression(e)}visitParenthesizedExpression(e){var i=this.sb;i.push("("),this.visitNode(e.expression),i.push(")")}visitPropertyAccessExpression(e){this.visitNode(e.expression),this.sb.push("."),this.visitIdentifierExpression(e.property)}visitTernaryExpression(e){var i=this.sb;this.visitNode(e.condition),i.push(" ? "),this.visitNode(e.ifThen),i.push(" : "),this.visitNode(e.ifElse)}visitUnaryExpression(e){switch(e.kind){case s.NodeKind.UNARYPOSTFIX:this.visitUnaryPostfixExpression(e);break;case s.NodeKind.UNARYPREFIX:this.visitUnaryPrefixExpression(e);break;default:assert(!1)}}visitUnaryPostfixExpression(e){this.visitNode(e.operand),this.sb.push(s.operatorTokenToString(e.operator))}visitUnaryPrefixExpression(e){this.sb.push(s.operatorTokenToString(e.operator)),this.visitNode(e.operand)}visitNodeAndTerminate(e){this.visitNode(e);var i=this.sb;if(i.length&&e.kind!=s.NodeKind.VARIABLE&&e.kind!=s.NodeKind.EXPRESSION){let e=i[i.length-1],t=e.length-1;t>=0&&(125==e.charCodeAt(t)||59==e.charCodeAt(t))?i.push("\n"):i.push(";\n")}else i.push(";\n")}visitBlockStatement(e){var i=this.sb,t=e.statements,n=t.length;if(n){i.push("{\n");let e=++this.indentLevel;for(let r=0;r<n;++r)s.indent(i,e),this.visitNodeAndTerminate(t[r]);s.indent(i,--this.indentLevel),i.push("}")}else i.push("{}")}visitBreakStatement(e){var i=e.label;i?(this.sb.push("break "),this.visitIdentifierExpression(i)):this.sb.push("break")}visitContinueStatement(e){var i=e.label;i?(this.sb.push("continue "),this.visitIdentifierExpression(i)):this.sb.push("continue")}visitClassDeclaration(e,i=!1){var t=e.decorators;if(t)for(let e=0,i=t.length;e<i;++e)this.serializeDecorator(t[e]);var n=this.sb;i?n.push("export default "):this.serializeExternalModifiers(e),e.is(s.CommonFlags.ABSTRACT)&&n.push("abstract "),e.name.text.length?(n.push("class "),this.visitIdentifierExpression(e.name)):n.push("class");var r=e.typeParameters;if(r&&r.length){n.push("<"),this.visitTypeParameter(r[0]);for(let e=1,i=r.length;e<i;++e)n.push(", "),this.visitTypeParameter(r[e]);n.push(">")}var a=e.extendsType;a&&(n.push(" extends "),this.visitTypeNode(a));var o=e.implementsTypes;if(o){let e=o.length;if(e){n.push(" implements "),this.visitTypeNode(o[0]);for(let i=1;i<e;++i)n.push(", "),this.visitTypeNode(o[i])}}var h=e.members;if(h.length){n.push(" {\n");let e=++this.indentLevel;for(let i=0,t=h.length;i<t;++i){let t=h[i];(t.kind!=s.NodeKind.FIELDDECLARATION||t.parameterIndex<0)&&(s.indent(n,e),this.visitNodeAndTerminate(t))}s.indent(n,--this.indentLevel),n.push("}")}else n.push(" {}")}visitDoStatement(e){var i=this.sb;i.push("do "),this.visitNode(e.statement),e.statement.kind==s.NodeKind.BLOCK?i.push(" while ("):(i.push(";\n"),s.indent(i,this.indentLevel),i.push("while (")),this.visitNode(e.condition),i.push(")")}visitEmptyStatement(e){}visitEnumDeclaration(e,i=!1){var t=this.sb;i?t.push("export default "):this.serializeExternalModifiers(e),e.is(s.CommonFlags.CONST)&&t.push("const "),t.push("enum "),this.visitIdentifierExpression(e.name);var n=e.values.length;if(n){t.push(" {\n");let i=++this.indentLevel;s.indent(t,i),this.visitEnumValueDeclaration(e.values[0]);for(let r=1;r<n;++r)t.push(",\n"),s.indent(t,i),this.visitEnumValueDeclaration(e.values[r]);t.push("\n"),s.indent(t,--this.indentLevel),t.push("}")}else t.push(" {}")}visitEnumValueDeclaration(e){this.visitIdentifierExpression(e.name),e.value&&(this.sb.push(" = "),this.visitNode(e.value))}visitExportImportStatement(e){var i=this.sb;i.push("export import "),this.visitIdentifierExpression(e.externalName),i.push(" = "),this.visitIdentifierExpression(e.name)}visitExportMember(e){this.visitIdentifierExpression(e.localName),e.exportedName.text!=e.localName.text&&(this.sb.push(" as "),this.visitIdentifierExpression(e.exportedName))}visitExportStatement(e){var i=this.sb;e.isDeclare&&i.push("declare ");var t=e.members;if(t&&t.length){let e=t.length;i.push("export {\n");let n=++this.indentLevel;s.indent(i,n),this.visitExportMember(t[0]);for(let r=1;r<e;++r)i.push(",\n"),s.indent(i,n),this.visitExportMember(t[r]);--this.indentLevel,i.push("\n}")}else i.push("export {}");var n=e.path;n&&(i.push(" from "),this.visitStringLiteralExpression(n)),i.push(";")}visitExportDefaultStatement(e){var i=e.declaration;switch(i.kind){case s.NodeKind.ENUMDECLARATION:this.visitEnumDeclaration(i,!0);break;case s.NodeKind.FUNCTIONDECLARATION:this.visitFunctionDeclaration(i,!0);break;case s.NodeKind.CLASSDECLARATION:this.visitClassDeclaration(i,!0);break;case s.NodeKind.INTERFACEDECLARATION:this.visitInterfaceDeclaration(i,!0);break;case s.NodeKind.NAMESPACEDECLARATION:this.visitNamespaceDeclaration(i,!0);break;default:assert(!1)}}visitExpressionStatement(e){this.visitNode(e.expression)}visitFieldDeclaration(e){var i=e.decorators;if(i)for(let e=0,t=i.length;e<t;++e)this.serializeDecorator(i[e]);this.serializeAccessModifiers(e),this.visitIdentifierExpression(e.name);var t=this.sb;e.flags&s.CommonFlags.DEFINITE_ASSIGNMENT&&t.push("!");var n=e.type;n&&(t.push(": "),this.visitTypeNode(n));var r=e.initializer;r&&(t.push(" = "),this.visitNode(r))}visitForStatement(e){var i=this.sb;i.push("for (");var t=e.initializer;t&&this.visitNode(t);var s=e.condition;s?(i.push("; "),this.visitNode(s)):i.push(";");var n=e.incrementor;n?(i.push("; "),this.visitNode(n)):i.push(";"),i.push(") "),this.visitNode(e.statement)}visitFunctionDeclaration(e,i=!1){var t=this.sb,s=e.decorators;if(s)for(let e=0,i=s.length;e<i;++e)this.serializeDecorator(s[e]);i?t.push("export default "):(this.serializeExternalModifiers(e),this.serializeAccessModifiers(e)),e.name.text.length?t.push("function "):t.push("function"),this.visitFunctionCommon(e)}visitFunctionCommon(e){var i=this.sb;this.visitIdentifierExpression(e.name);var t=e.signature,n=e.typeParameters;if(n){let e=n.length;if(e){i.push("<"),this.visitTypeParameter(n[0]);for(let t=1;t<e;++t)i.push(", "),this.visitTypeParameter(n[t]);i.push(">")}}if(2==e.arrowKind){let e=t.parameters;assert(1==e.length),assert(!t.explicitThisType),this.serializeParameter(e[0])}else{i.push("(");let e=t.parameters,s=e.length,n=t.explicitThisType;if(n&&(i.push("this: "),this.visitTypeNode(n)),s){n&&i.push(", "),this.serializeParameter(e[0]);for(let t=1;t<s;++t)i.push(", "),this.serializeParameter(e[t])}}var r=e.body,a=t.returnType;e.arrowKind?r?(2==e.arrowKind?assert(s.isTypeOmitted(a)):s.isTypeOmitted(a)?i.push(")"):(i.push("): "),this.visitTypeNode(a)),i.push(" => "),this.visitNode(r)):(assert(!s.isTypeOmitted(a)),i.push(" => "),this.visitTypeNode(a)):(s.isTypeOmitted(a)||e.isAny(s.CommonFlags.CONSTRUCTOR|s.CommonFlags.SET)?i.push(")"):(i.push("): "),this.visitTypeNode(a)),r&&(i.push(" "),this.visitNode(r)))}visitIfStatement(e){var i=this.sb;i.push("if ("),this.visitNode(e.condition),i.push(") ");var t=e.ifTrue;this.visitNode(t),t.kind!=s.NodeKind.BLOCK&&i.push(";\n");var n=e.ifFalse;n&&(t.kind==s.NodeKind.BLOCK?i.push(" else "):i.push("else "),this.visitNode(n))}visitImportDeclaration(e){var i=e.foreignName,t=e.name;this.visitIdentifierExpression(i),i.text!=t.text&&(this.sb.push(" as "),this.visitIdentifierExpression(t))}visitImportStatement(e){var i=this.sb;i.push("import ");var t=e.declarations,n=e.namespaceName;if(t){let e=t.length;if(e){i.push("{\n");let n=++this.indentLevel;s.indent(i,n),this.visitImportDeclaration(t[0]);for(let r=1;r<e;++r)i.push(",\n"),s.indent(i,n),this.visitImportDeclaration(t[r]);--this.indentLevel,i.push("\n} from ")}else i.push("{} from ")}else n&&(i.push("* as "),this.visitIdentifierExpression(n),i.push(" from "));this.visitStringLiteralExpression(e.path)}visitIndexSignatureDeclaration(e){var i=this.sb;i.push("[key: "),this.visitTypeNode(e.keyType),i.push("]: "),this.visitTypeNode(e.valueType)}visitInterfaceDeclaration(e,i=!1){var t=e.decorators;if(t)for(let e=0,i=t.length;e<i;++e)this.serializeDecorator(t[e]);var n=this.sb;i?n.push("export default "):this.serializeExternalModifiers(e),n.push("interface "),this.visitIdentifierExpression(e.name);var r=e.typeParameters;if(r&&r.length){n.push("<"),this.visitTypeParameter(r[0]);for(let e=1,i=r.length;e<i;++e)n.push(", "),this.visitTypeParameter(r[e]);n.push(">")}var a=e.extendsType;a&&(n.push(" extends "),this.visitTypeNode(a)),n.push(" {\n");var o=++this.indentLevel,h=e.members;for(let e=0,i=h.length;e<i;++e)s.indent(n,o),this.visitNodeAndTerminate(h[e]);--this.indentLevel,n.push("}")}visitMethodDeclaration(e){var i=e.decorators;if(i)for(let e=0,t=i.length;e<t;++e)this.serializeDecorator(i[e]);this.serializeAccessModifiers(e),e.is(s.CommonFlags.GET)?this.sb.push("get "):e.is(s.CommonFlags.SET)&&this.sb.push("set "),this.visitFunctionCommon(e)}visitNamespaceDeclaration(e,i=!1){var t=e.decorators;if(t)for(let e=0,i=t.length;e<i;++e)this.serializeDecorator(t[e]);var n=this.sb;i?n.push("export default "):this.serializeExternalModifiers(e),n.push("namespace "),this.visitIdentifierExpression(e.name);var r=e.members;if(r.length){n.push(" {\n");let e=++this.indentLevel;for(let i=0,t=r.length;i<t;++i)s.indent(n,e),this.visitNodeAndTerminate(r[i]);s.indent(n,--this.indentLevel),n.push("}")}else n.push(" {}")}visitReturnStatement(e){var i=e.value;i?(this.sb.push("return "),this.visitNode(i)):this.sb.push("return")}visitSwitchCase(e){var i=this.sb,t=e.label;t?(i.push("case "),this.visitNode(t),i.push(":\n")):i.push("default:\n");var n=e.statements,r=n.length;if(r){let e=++this.indentLevel;s.indent(i,e),this.visitNodeAndTerminate(n[0]);for(let t=1;t<r;++t)s.indent(i,e),this.visitNodeAndTerminate(n[t]);--this.indentLevel}}visitSwitchStatement(e){var i=this.sb;i.push("switch ("),this.visitNode(e.condition),i.push(") {\n");var t=++this.indentLevel,n=e.cases;for(let e=0,r=n.length;e<r;++e)s.indent(i,t),this.visitSwitchCase(n[e]),i.push("\n");--this.indentLevel,i.push("}")}visitThrowStatement(e){this.sb.push("throw "),this.visitNode(e.value)}visitTryStatement(e){var i=this.sb;i.push("try {\n");var t=++this.indentLevel,n=e.statements;for(let e=0,r=n.length;e<r;++e)s.indent(i,t),this.visitNodeAndTerminate(n[e]);var r=e.catchVariable;if(r){s.indent(i,t-1),i.push("} catch ("),this.visitIdentifierExpression(r),i.push(") {\n");let n=e.catchStatements;if(n)for(let e=0,r=n.length;e<r;++e)s.indent(i,t),this.visitNodeAndTerminate(n[e])}var a=e.finallyStatements;if(a){s.indent(i,t-1),i.push("} finally {\n");for(let e=0,n=a.length;e<n;++e)s.indent(i,t),this.visitNodeAndTerminate(a[e])}s.indent(i,t-1),i.push("}")}visitTypeDeclaration(e){var i=e.decorators;if(i)for(let e=0,t=i.length;e<t;++e)this.serializeDecorator(i[e]);var t=this.sb;this.serializeExternalModifiers(e),t.push("type "),this.visitIdentifierExpression(e.name);var s=e.typeParameters;if(s){let e=s.length;if(e){t.push("<");for(let i=0;i<e;++i)this.visitTypeParameter(s[i]);t.push(">")}}t.push(" = "),this.visitTypeNode(e.type)}visitVariableDeclaration(e){this.visitIdentifierExpression(e.name);var i=e.type,t=this.sb;e.flags&s.CommonFlags.DEFINITE_ASSIGNMENT&&t.push("!"),i&&(t.push(": "),this.visitTypeNode(i));var n=e.initializer;n&&(t.push(" = "),this.visitNode(n))}visitVariableStatement(e){var i=e.decorators;if(i)for(let e=0,t=i.length;e<t;++e)this.serializeDecorator(i[e]);var t=this.sb,n=e.declarations,r=assert(n.length),a=n[0];this.serializeExternalModifiers(a),t.push(a.is(s.CommonFlags.CONST)?"const ":a.is(s.CommonFlags.LET)?"let ":"var "),this.visitVariableDeclaration(e.declarations[0]);for(let i=1;i<r;++i)t.push(", "),this.visitVariableDeclaration(e.declarations[i])}visitWhileStatement(e){var i=this.sb;i.push("while ("),this.visitNode(e.condition),e.statement.kind==s.NodeKind.EMPTY?i.push(")"):(i.push(") "),this.visitNode(e.statement))}serializeDecorator(e){var i=this.sb;i.push("@"),this.visitNode(e.name);var t=e.arguments;if(t){i.push("(");let e=t.length;if(e){this.visitNode(t[0]);for(let s=1;s<e;++s)i.push(", "),this.visitNode(t[s])}i.push(")\n")}else i.push("\n");s.indent(i,this.indentLevel)}serializeParameter(e){var i=this.sb,t=e.parameterKind,n=e.implicitFieldDeclaration;n&&this.serializeAccessModifiers(n),t==s.ParameterKind.REST&&i.push("..."),this.visitIdentifierExpression(e.name);var r=e.type,a=e.initializer;r&&(t!=s.ParameterKind.OPTIONAL||a||i.push("?"),s.isTypeOmitted(r)||(i.push(": "),this.visitTypeNode(r))),a&&(i.push(" = "),this.visitNode(a))}serializeExternalModifiers(e){var i=this.sb;e.is(s.CommonFlags.EXPORT)?i.push("export "):e.is(s.CommonFlags.IMPORT)?i.push("import "):e.is(s.CommonFlags.DECLARE)&&i.push("declare ")}serializeAccessModifiers(e){var i=this.sb;e.is(s.CommonFlags.PUBLIC)?i.push("public "):e.is(s.CommonFlags.PRIVATE)?i.push("private "):e.is(s.CommonFlags.PROTECTED)&&i.push("protected "),e.is(s.CommonFlags.STATIC)?i.push("static "):e.is(s.CommonFlags.ABSTRACT)&&i.push("abstract "),e.is(s.CommonFlags.READONLY)&&i.push("readonly ")}finish(){var e=this.sb.join("");return this.sb=[],e}}i.ASTBuilder=n},function(e,i,t){"use strict";Object.defineProperty(i,"__esModule",{value:!0});i.AbstractVisitor=class{visit(e){var i;if(null!=e)if(e instanceof Array)e.map(e=>{this.visit(e)});else if(e instanceof Map)for(let[i,t]of e.entries())this.visit(t);else if(null!=(i=e)&&"function"==typeof i[Symbol.iterator])for(let i of e)this.visit(i);else this._visit(e)}}},function(e,i,t){"use strict";Object.defineProperty(i,"__esModule",{value:!0});const s=t(2),n=["builtin",".spec","dataview","date","math","number","string","typedarray","bindings/Date","bindings/Math"];class r extends s.BaseVisitor{check(e){e.text.substring(0,e.text.indexOf("\n")).includes("ignore")||n.some(i=>e.normalizedPath.includes(i))||this.visit(e)}static check(e){const i=new r;for(let t=0;t<e.program.sources.length;t++)i.check(e.program.sources[t])}visitTypeName(e){/f32|f64/.test(e.identifier.text)&&r.floatsFound.push(e.range.source.normalizedPath+" line: "+e.range.line+" "+e.range.source.text.split("\n")[e.range.line-1])}static checkBinary(e){const i=e.toText();if(/f32|f64/.test(i))throw new Error("Floating point numbers are not allowed in smart contracts: Check\n"+r.floatsFound.join("\n"))}}i.TypeChecker=r,r.floatsFound=[]}])}));